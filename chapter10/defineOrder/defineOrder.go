// Выбор последовательности исполнения горутин
// Вы не обязаны делать какие-либо предположения относительно последовательности
// выполнения горутин. Однако бывают случаи, когда необходимо контролировать
// этот порядок. В данном подразделе вы узнаете, как это делать с помощью
// сигнальных каналов.

// «Зачем создавать горутины, а затем выполнять их в за-
// данном порядке, если то же самое гораздо легче сделать с помощью
// обычных функций?» Ответ прост: горутины способны работать одно-
// временно и ожидать завершения других горутин, тогда как функции
// не могут этого делать, поскольку выполняются последовательно.

package main

import (
	"fmt"
	"time"
)

func main() {
	x := make(chan struct{})
	y := make(chan struct{})
	z := make(chan struct{})

	go A(x, y)
	go C(z)
	go C(z)
	go B(y, z)
	go C(z)

	close(x)
	time.Sleep(3 * time.Second)
}

func A(a, b chan struct{}) {
	<-a
	fmt.Println("A()!")
	time.Sleep(time.Second)
	close(b)
}

func B(a, b chan struct{}) {
	<-a
	fmt.Println("B()!")
	close(b)
}

func C(a chan struct{}) {
	<-a
	fmt.Println("C()!")
}
