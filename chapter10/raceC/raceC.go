// Распознавание состояния гонки

// 		Состояние гонки по данным — это ситуация, когда два и более работающих элемента,
// таких как потоки и горутины, пытаются получить контроль над общим ресурсом
// или переменной программы либо изменить их. Строго говоря, гонка по данным
// происходит тогда, когда две или более инструкции обращаются к одному и тому же
// адресу памяти и хотя бы одна из них выполняет операцию записи. Если все опера-
// ции являются чтением, то состояния гонки нет.
//
// 		Использование флага -race при запуске или сборке исходного файла Go вклю-
// чает детектор гонки Go, что заставляет компилятор создать модифицированную
// версию исполняемого файла. Эта измененная версия может записывать все опера-
// ции доступа к общим переменным, а также все события синхронизации, включая
// обращения к sync.Mutex и sync.WaitGroup. Проанализировав соответствующие
// события, детектор гонки выводит отчет, который может помочь распознать потен-
// циальные проблемы, чтобы их можно было вовремя исправить.

package main

import (
	"fmt"
	"os"
	"strconv"
	"sync"
)

var aMutex sync.Mutex // решает проблему с DataRace

func main() {
	args := os.Args
	if len(args) != 2 {
		fmt.Println("need an int")
		return
	}
	numGR, err := strconv.Atoi(args[1])
	if err != nil {
		fmt.Println(err)
		return
	}

	var wg sync.WaitGroup
	var i int

	k := make(map[int]int)
	k[1] = 12

	for i = 0; i < numGR; i++ {
		wg.Add(1)
		go func(j int) {
			defer wg.Done()
			aMutex.Lock() // решает проблему с DataRace
			k[j] = j
			aMutex.Unlock() // решает проблему с DataRace
		}(i)
	}

	wg.Wait()
	k[2] = 10
	fmt.Printf("k = %#v\n", k)
}
