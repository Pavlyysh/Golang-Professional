------------------------ Планировщик Go ------------------------------------

    В Go используется модель конкурентности fork-join. Слово fork (вилка) в на-
звании модели говорит о том, что дочерняя ветвь может быть создана в любой
точке программы. Аналогично слово join («объединение») говорит о том, что
в некоторой точке дочерняя ветвь заканчивается и объединяется с родительской.
Точками такого объединения, в частности, являются операторы sync.Wait() и ка-
налы, которые собирают результаты выполнения горутин, тогда как каждая новая
горутина создает дочернюю ветвь.

    тратегия справедливого планирования довольно проста концептуально и име-
ет простую реализацию. Согласно этой стратегии, вся нагрузка должна равномерно
распределяться между доступными процессорами. Поначалу такая стратегия может
показаться идеальной, поскольку приходится учитывать не так уж много нюансов,
при этом сохраняя одинаковую нагрузку всех процессоров. Однако на поверку
оказывается, что это не совсем так, поскольку большинство распределенных за-
дач обычно зависят друг от друга, из-за чего некоторые процессоры оказываются
недостаточно загружены, или, что то же самое, одни процессоры используются
интенсивнее, чем другие.

    Горутина в Go — это задача, а все, что происходит после вызова горутины, яв-
ляется продолжением. В стратегии перехвата работы, используемой планировщи-
ком Go, недостаточно загруженный (логический) процессор ищет дополнительную
работу, которую выполняют другие процессоры. Найдя такие задания, он перехва-
тывает их у другого процессора или нескольких процессоров — отсюда и название.
Кроме того, алгоритм перехвата работы в Go перехватывает продолжения и ставит
их в очередь. Останавливающее соединение, как следует из названия, — это место,
в котором поток выполнения останавливается в точке соединения и начинает ис-
кать себе другую работу.

    Несмотря на то что и при перехвате задач, и при перехвате продолжений имеет
место останавливающее соединение, продолжения случаются чаще, чем задачи;
поэтому алгоритм Go работает не с задачами, а с продолжениями.